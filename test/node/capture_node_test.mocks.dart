// Mocks generated by Mockito 5.4.4 from annotations
// in coast_audio/test/node/capture_node_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:coast_audio/coast_audio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioDeviceContext_0 extends _i1.SmartFake
    implements _i2.AudioDeviceContext {
  _FakeAudioDeviceContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioFormat_1 extends _i1.SmartFake implements _i2.AudioFormat {
  _FakeAudioFormat_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCaptureDeviceReadResult_2 extends _i1.SmartFake
    implements _i2.CaptureDeviceReadResult {
  _FakeCaptureDeviceReadResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CaptureDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockCaptureDevice extends _i1.Mock implements _i2.CaptureDevice {
  MockCaptureDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioDeviceContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeAudioDeviceContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.AudioDeviceContext);

  @override
  _i2.AudioDeviceType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.AudioDeviceType.playback,
      ) as _i2.AudioDeviceType);

  @override
  int get bufferFrameSize => (super.noSuchMethod(
        Invocation.getter(#bufferFrameSize),
        returnValue: 0,
      ) as int);

  @override
  _i2.AudioFormat get format => (super.noSuchMethod(
        Invocation.getter(#format),
        returnValue: _FakeAudioFormat_1(
          this,
          Invocation.getter(#format),
        ),
      ) as _i2.AudioFormat);

  @override
  _i3.Stream<_i2.AudioDeviceNotification> get notification =>
      (super.noSuchMethod(
        Invocation.getter(#notification),
        returnValue: _i3.Stream<_i2.AudioDeviceNotification>.empty(),
      ) as _i3.Stream<_i2.AudioDeviceNotification>);

  @override
  bool get isStarted => (super.noSuchMethod(
        Invocation.getter(#isStarted),
        returnValue: false,
      ) as bool);

  @override
  int get availableReadFrames => (super.noSuchMethod(
        Invocation.getter(#availableReadFrames),
        returnValue: 0,
      ) as int);

  @override
  int get availableWriteFrames => (super.noSuchMethod(
        Invocation.getter(#availableWriteFrames),
        returnValue: 0,
      ) as int);

  @override
  double get volume => (super.noSuchMethod(
        Invocation.getter(#volume),
        returnValue: 0.0,
      ) as double);

  @override
  set volume(double? value) => super.noSuchMethod(
        Invocation.setter(
          #volume,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.AudioDeviceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i2.AudioDeviceState.uninitialized,
      ) as _i2.AudioDeviceState);

  @override
  int get resourceId => (super.noSuchMethod(
        Invocation.getter(#resourceId),
        returnValue: 0,
      ) as int);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  _i2.CaptureDeviceReadResult read(_i2.AudioBuffer? buffer) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [buffer],
        ),
        returnValue: _FakeCaptureDeviceReadResult_2(
          this,
          Invocation.method(
            #read,
            [buffer],
          ),
        ),
      ) as _i2.CaptureDeviceReadResult);

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop({bool? clearBuffer = true}) => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
          {#clearBuffer: clearBuffer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearBuffer() => super.noSuchMethod(
        Invocation.method(
          #clearBuffer,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void throwIfDisposed() => super.noSuchMethod(
        Invocation.method(
          #throwIfDisposed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setResourceFinalizer<T>(void Function()? onFinalize) =>
      super.noSuchMethod(
        Invocation.method(
          #setResourceFinalizer,
          [onFinalize],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearResourceFinalizer() => super.noSuchMethod(
        Invocation.method(
          #clearResourceFinalizer,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
